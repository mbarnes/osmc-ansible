---
- name: Add packages for secrets
  apt:
    name:
    - gnupg2
    - pass
    # for One-Time Passwords w/ pass
    # On Debian, this is a transitional package for pass-otp
    # On Ubuntu, this is still the current name of the package.
    - pass-extension-otp
    - xclip
    - zbar-tools
  become: yes

- name: Collect existing GPG keys
  command: "gpg2 --list-secret-keys --with-colons"
  register: gpg_colon_output

- name: Parse GPG key data
  set_fact:
    # Assume jc is installed locally. Playbooks should verify this.
    gpg_parsed_data: "{{ gpg_colon_output.stdout | community.general.jc('gpg') }}"

- name: Process GPG key data
  set_fact:
    gpg_remote_key_ids: "{{ gpg_parsed_data | selectattr('type', 'eq', 'sec') | map(attribute='key_id') }}"

- name: Collect local GPG keys to transfer
  command: "gpg2 --list-secret-keys --with-colons {{ gpg_key_email }}"
  register: gpg_colon_output
  delegate_to: localhost
  changed_when: False
  run_once: True

- name: Parse GPG key data
  set_fact:
    # Assume jc is installed locally. Playbooks should verify this.
    gpg_parsed_data: "{{ gpg_colon_output.stdout | community.general.jc('gpg') }}"

- name: Process GPG key data
  set_fact:
    gpg_secret_key_attrs: |
      {% set result = [] %}
      {% set alg_names = {'1': 'RSA'} %}
      {% for item in gpg_parsed_data %}
      {%   if item.type == 'sec' %}
      {%     set _ = result.append(item) %}
      {%     set pub_key_alg_name = alg_names.get(item.pub_key_alg, 'Unknown') %}
      {%     set _ = result[-1].__setitem__('pub_key_alg_name', pub_key_alg_name) %}
      {%   elif item.type == 'uid' %}
      {%     set _ = result[-1].__setitem__('user_id', item.user_id) %}
      {%   endif %}
      {% endfor %}
      {{ result }}
  run_once: True

- name: Transfer each GPG key
  include_tasks: transfer_gpg_key.yml
  when: item.key_id not in gpg_remote_key_ids
  loop: "{{ gpg_secret_key_attrs }}"

- name: Export GPG ownertrust values
  command: "gpg2 --export-ownertrust"
  register: gpg_ownertrust
  delegate_to: localhost
  changed_when: False
  run_once: True

- name: Import GPG ownertrust values
  command:
  args:
    cmd: "gpg2 --import-ownertrust"
    stdin: "{{ gpg_ownertrust.stdout }}"

- name: Transfer SSH keys
  copy:
    src: "{{ item }}"
    dest: "{{ ansible_user_dir }}/.ssh/"
    mode: preserve
  with_fileglob: "~/.ssh/id_*"

# FIXME If SSH keys were just added, this will fail until
#       the keys are added to the desktop session keyring
#       and allowed to be automatically unlocked. I'm not
#       sure how to automate this.
- name: Clone password store repository
  git:
    repo: "{{ password_store_git_repo }}"
    dest: "{{ ansible_user_dir }}/.password-store"

- name: Add helper alias for 2FA from QR codes
  copy:
    src: qrcode-to-otpauth
    dest: "{{ bash_aliases_dir }}/"

#!/usr/bin/ansible-playbook
---
#
# Configures hosts in an inventory group named "mediacenter_group"
# consisting of pre-installed OSMC devices with networking and SSH
# service available.
#
# Usage: ./setup.yml --ask-vault-pass
#
# Available tags:
# - system    : Run all system-level tasks (as root)
# - user      : Run all user-level tasks
# - apt       : (system) APT Configuration
# - journal   : (system) Journal Configuration
# - mta       : (system) Mail Transport Agent (MTA) Configuration
# - ups       : (system) Uninterruptible Power Supply (UPS) Configuration
# - vpn       : (system) OpenVPN Configuration
# - storage   : (system) Storage Configuration
# - docker    : (system) Docker Configuration
# - common    : (user) Common System and User Configuration
# - powerline : (user) Powerline Configuration
# - kodi      : (user) Kodi Configuration
# - retropie  : (user) RetroPie Configuration
#

- hosts: mediacenter_group
  remote_user: osmc
  # Gather facts later as root
  gather_facts: no

  vars:

    network_cidr: "{{ (local_area_network + '/' + local_area_netmask) | ansible.utils.ipaddr('net') }}"
    host_ip_addr: "{{ ansible_all_ipv4_addresses | ansible.utils.ipaddr(network_cidr) | first }}"

    newshosting:
      host: news.newshosting.com
      port: 563
      username: mbarnes@fastmail.com
      encryption: "yes"
      connections: 60
      retention_days: 4689

    # For system-level tasks that need the non-root user
    osmc_user_uid: "{{ ansible_env.SUDO_UID }}"
    osmc_user_gid: "{{ ansible_env.SUDO_GID }}"

    cadvisor_image_name: zcube/cadvisor
    cadvisor_memory_limit: 50m
    cadvisor_host_port: 8080

    pihole_image_name: pihole/pihole
    pihole_memory_limit: 100m
    pihole_host_dns_port: 53
    pihole_host_http_port: 8053

    nzbget_image_name: ghcr.io/linuxserver/nzbget
    nzbget_memory_limit: 50m
    nzbget_host_port: 6789
    nzbget_config_dir: /var/lib/nzbget

    sonarr_image_name: ghcr.io/linuxserver/sonarr
    sonarr_memory_limit: 250m
    sonarr_host_port: 8989
    sonarr_config_dir: /var/lib/sonarr

    radarr_image_name: ghcr.io/linuxserver/radarr
    radarr_memory_limit: 250m
    radarr_host_port: 7878
    radarr_config_dir: /var/lib/radarr

    bazarr_image_name: ghcr.io/linuxserver/bazarr
    bazarr_memory_limit: 150m
    bazarr_host_port: 6767
    bazarr_config_dir: /var/lib/bazarr

    mariadb_image_name: ghcr.io/linuxserver/mariadb
    mariadb_memory_limit: 150m
    mariadb_host_port: 3306
    mariadb_config_dir: /var/lib/mariadb

    containerized_services:
    - cadvisor.service
    - pihole.service
    - nzbget.service
    - sonarr.service
    - radarr.service
    - bazarr.service
    - mariadb.service

    # .NET / Mono based containers gradually consume memory
    # over time and need periodic restarts.  The memory limit
    # on these containers should be tuned high enough so cron
    # restarts them gracefully before they reach their limit.
    weekly_restart_containerized_services:
    - sonarr.service
    - radarr.service
    - bazarr.service

    # XXX Hard-coding the full path because this is evaluated
    #     from a system-level task (exports.j2) and the value
    #     of "ansible_user_dir" in that context is "/root".
    kodi_userdata_path: "/home/osmc/.kodi/userdata"

  pre_tasks:

  - name: Check Ansible version
    assert:
      that: "ansible_version.full is version('2.9', '>=')"
      msg: "This playbook requires Ansible 2.9 or later"
    tags:
    - always

  - name: Verify vault secret
    set_fact:
      vault_test: !vault |
        $ANSIBLE_VAULT;1.1;AES256
        37393232346234616538646162396633353964346536303438363862383035643166343438663836
        3830353761366261363430336430653836616233366239640a653134326561306261643436303539
        66393361353064353139626632366562363337333063663865353333333230383336363436626563
        3236356330363838620a306332613635313765393939306265636465313830666637613433386465
        63306364396263333965613739613663323331333733316438383165636230396366
    tags:
    - always

  - name: Gather more facts as root
    setup:
    become: yes
    tags:
    - always

  tasks:

  #------------------------------------
  # Begin system-level tasks (as root)
  #------------------------------------

  - name: System-level tasks
    become: yes
    become_method: sudo
    # The -i is necessary to use root's PATH.
    become_flags: -H -S -n -i
    block:

    #-------------------
    # Apt Configuration
    #-------------------

    - name: Add required packages
      apt:
        name:
        - bsd-mailx
        - containerd.io
        - python3-netaddr
        - python3-pymysql
      tags:
      - apt
      - system

    #-----------------------
    # Journal Configuration
    #-----------------------

    - import_role:
        name: journal
      tags:
      - journal
      - system

    #------------------------------------------
    # Mail Transport Agent (MTA) Configuration
    #------------------------------------------

    - import_role:
        name: mta
      tags:
      - mta
      - system

    #--------------------------------------------------
    # Uninterruptible Power Supply (UPS) Configuration
    # For an APC Back-UPS CS 350
    #--------------------------------------------------

    - import_role:
        name: ups
      tags:
      - ups
      - system

    #-----------------------
    # OpenVPN Configuration
    #-----------------------

    - import_role:
        name: vpn
      tags:
      - vpn
      - system

    #-----------------------
    # Storage Configuration
    #-----------------------

    - import_role:
        name: storage
      vars:
        nfs_exports_rw: "{{ host_ip_addr }}"
        nfs_exports_ro: "{{ network_cidr }}"
      tags:
      - storage
      - system

    #----------------------
    # Docker Configuration
    #----------------------

    - import_role:
        name: docker
      tags:
      - docker
      - system

    - name: Pull Docker images for various services
      docker_image:
        name: "{{ item }}"
        source: pull
      loop:
      - "{{ cadvisor_image_name }}"
      - "{{ pihole_image_name }}"
      - "{{ nzbget_image_name }}"
      - "{{ sonarr_image_name }}"
      - "{{ radarr_image_name }}"
      - "{{ bazarr_image_name }}"
      - "{{ mariadb_image_name }}"
      tags:
      - docker
      - system

    - name: Look up timezone name
      command: cat /etc/timezone
      register: timezone_result
      changed_when: False
      tags:
      - docker
      - system

    - set_fact:
        tz_name: "{{ timezone_result.stdout }}"
      tags:
      - docker
      - system

    - name: Create Docker volume mount points
      file:
        path: "{{ item.path }}"
        mode: u=rwx,g=rx,o=rx
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        state: directory
      loop:
      - path: /etc/pihole
        owner: root
        group: root
      - path: /etc/dnsmasq.d
        owner: root
        group: root
      - path: "{{ nzbget_config_dir }}"
        owner: "{{ osmc_user_uid }}"
        group: "{{ osmc_user_gid }}"
      - path: "{{ sonarr_config_dir }}"
        owner: "{{ osmc_user_uid }}"
        group: "{{ osmc_user_gid }}"
      - path: "{{ radarr_config_dir }}"
        owner: "{{ osmc_user_uid }}"
        group: "{{ osmc_user_gid }}"
      - path: "{{ bazarr_config_dir }}"
        owner: "{{ osmc_user_uid }}"
        group: "{{ osmc_user_gid }}"
      - path: "{{ mariadb_config_dir }}"
        owner: "{{ osmc_user_uid }}"
        group: "{{ osmc_user_gid }}"
      tags:
      - docker
      - system

    - name: Add service files for Docker images
      template:
        src: "{{ item }}.j2"
        dest: "/etc/systemd/system/{{ item }}"
        mode: u=rw,g=r,o=r
        owner: root
        group: root
      loop: "{{ containerized_services }}"
      tags:
      - docker
      - system

    # DNS proxy binds port 53 and prevents pihole container from starting.
    - name: Disable connman DNS proxy
      lineinfile:
        path: /etc/connman.prefs
        regexp: "^dnsproxy="
        line: "dnsproxy=no"
      tags:
      - docker
      - system

    - name: Add pihole configuration
      copy:
        src: setupVars.conf
        dest: /etc/pihole/setupVars.conf
      tags:
      - docker
      - system

    - name: Download default nzbget configuration
      get_url:
        url: https://raw.githubusercontent.com/nzbget/nzbget/develop/nzbget.conf
        dest: "{{ nzbget_config_dir }}/nzbget.conf"
        mode: u=rw,g=r,o=r
        owner: "{{ osmc_user_uid }}"
        group: "{{ osmc_user_gid }}"
        force: no
      tags:
      - docker
      - system

    - name: Customize nzbget configuration
      lineinfile:
        path: "{{ nzbget_config_dir }}/nzbget.conf"
        regexp: "^({{ item.key }})="
        line: "\\1={{ item.value }}"
        backrefs: yes
      no_log: True
      loop:
      - key: MainDir
        value: "{{ storage_path }}/Downloads"
      - key: DestDir
        value: ${MainDir}/completed
      - key: InterDir
        value: ${MainDir}/intermediate
      - key: WebDir
        value: ${AppDir}/webui
      - key: ConfigTemplate
        value: ${AppDir}/webui/nzbget.conf.template
      - key: Server1.Name
        value: Newshosting
      - key: Server1.Host
        value: "{{ newshosting.host }}"
      - key: Server1.Port
        value: "{{ newshosting.port }}"
      - key: Server1.Username
        value: "{{ newshosting.username }}"
      - key: Server1.Password
        value: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          64363732636163313835383539646663396133623664383331633665306339633634623636323731
          6139393066396538633232613733356133303565366339330a393461313731386262613264376161
          37336537336561356230623432663365633235393237373131623030376561623734663462656666
          3434616461303430310a356335393133373835333539306635306438616561313664393739366630
          33646561636136393535386436376164383365656633316662373131363139396630
      - key: Server1.Encryption
        value: "{{ newshosting.encryption }}"
      - key: Server1.Connections
        value: "{{ newshosting.connections }}"
      - key: Server1.Retention
        value: "{{ newshosting.retention_days }}"
      - key: ControlUsername
        value: ""
      - key: ControlPassword
        value: ""
      tags:
      - docker
      - system

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      tags:
      - docker
      - system

    - name: Start or restart containerized services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: restarted
      loop: "{{ containerized_services }}"
      tags:
      - docker
      - system

    - name: Periodically restart memory-hungry containers
      template:
        src: container-restarts.j2
        dest: /etc/cron.weekly/container-restarts
        mode: u=rwx,g=rx,o=rx
        owner: root
        group: root
      tags:
      - docker
      - system

    # Kodi database does not need to be secure.
    - name: Create a MariaDB user for Kodi
      mysql_user:
        name: kodi
        host: '%'
        password: kodi
        priv: '*.*:ALL'
        check_implicit_admin: yes
      # XXX Client connections are flaky immediately after a restart.
      #     Perhaps an issue with the linuxserver/mariadb image?
      #     Tried waiting for the host port to open, but still flaky.
      #     So resorting to delayed retries.  Seems to work.
      retries: 3
      delay: 3
      register: result
      until: result is not failed
      tags:
      - system

  #-------------------------------------
  # End of system-level tasks (as root)
  #-------------------------------------

  - name: Gather facts again as remote user
    setup:
    tags:
    - always

  #--------------------------------------
  # Common System and User Configuration
  #--------------------------------------

  - import_role:
      name: common
    tags:
    - common
    - user

  #-------------------------
  # Powerline Configuration
  #-------------------------

  - import_role:
      name: powerline
    tags:
    - powerline
    - user

  #--------------------
  # Kodi Configuration
  #--------------------

  - import_role:
      name: kodi
    vars:
      mysql_host: "{{ host_ip_addr }}"
      mysql_port: "{{ mariadb_host_port }}"
      nfs_host: "{{ host_ip_addr }}"
    tags:
    - kodi
    - user

  #------------------------
  # RetroPie Configuration
  #------------------------

  - import_role:
      name: retropie
    tags:
    - retropie
    - user
